Metadados são informações de classes de negócio, disponibilizadas ao
framework em tempo de execução. O registro de metadados é feito através
da função virtual de classe InternalMetadataStr, que deve ser
implementada em cada classe de negócio que possua atributos.

MetadataString = <ObjectMetadata> | <QueryMetadata>

ObjectMetadata =
<ObjectClass> [<ObjectParam> [<ObjectParam> [...]]] ;
[<AttributeName> : <AttributeType> [<ObjectAttributeParam> [<ObjectAttributeParam>; [...]]]] ;

QueryMetadata =
<QueryClass> ( <TargerObjectClass> ) [<QueryParam> [<QueryParam> [...]]] ;
[<AttributeName> : <AttributeType> [<QueryAttributeParam> [<QueryAttributeParam>; [...]]]] ;

ObjectClass = nome da classe de negócio a ser registrada

ObjectParam = PersistentName: <ClassPersistentName>

ClassPersistentName = Nome da classe ou da tabela para fazer a
persistência. Se não for declarado, é utilizado o próprio nome da
classe.

AttributeName = Nome do atributo

AttributeType =
<String [(<FieldSize>)]> | <Integer> | <Float> | <Currency> |
<Enum [(<EnumMetadataName>)]> | <Boolean> | <Date> | <Time> |
<DateTime> | <Memo> | <Picture> |
<Part(<TargetObjectClass>)> | <Reference(<TargetObjectClass>)> |
<Parts(<TargetObjectClass>)> | <References(<TargetObjectClass>)>

EnumMetadataName = Nome do metadado Enum, registrado através da função
PressRegisterEnumMetadata

ObjectAttributeParam =
<Name: <AttributeName>> | <PersistentName: <AttributePersistentName>> |
<EditMask: <EditMask>> | <Size: <Size>>

AttributePersistentName = Nome do atributo ou do campo para fazer a
persistência. Se não for declarado, é utilizado o próprio nome do
atributo.

EditMask = Máscara que deve ser utilizada nos atributos que o suportam.
EditMask de atributos boolean possuem a sintaxe
"<TrueString>;<FalseString>".

QueryClass = Nome da Query a ser registrada

TargetObjectClass = Nome da classe de negócio comum a todos os itens da
lista

QueryParam = <ObjectParam> | <Any:> | <Order: <FieldName>>

Any = indica que todas as classes decendentes da classe Target devem ser
recuperadas, do contrário, apenas a classe Target é recuperada da base
de dados. Obs.: A sintaxe atual do Any exige dois pontos após a
declaração, trata-se de um bug que deverá ser removido em breve.

Order = indica através de qual atributo persistence o resultado deverá
ser ordenado

QueryAttributeParam =
<ObjectAtributeParam> | <Category: <CategoryType>>

Category = Indica o critério a ser utilizado para pesquisar objetos na
base de dados

CategoryType =
<Match> | <Starting> | <Finishing> | <Partial> |
<Greater> | <GreaterEqual> | <Lesser> | <LesserEqual>

Match = Para ser recuperado, o atributo do objeto deve possuir o mesmo
valor que o atributo da Query

Starting = para atributos string, indica que ele deve começar com o
valor do atributo da Query

Finishing = para atributos string, indica que ele deve terminar com o
valor do atributo da Query

Partial = para atributos string, indica que parte dele deve coincidir
com o valor do atributo da Query

Greater = O atributo do objeto deve ser maior do que o atributo da Query

GreaterEqual = deve ser maior ou igual

Lesser = deve ser menor

LesserEqual = deve ser menor ou igual
