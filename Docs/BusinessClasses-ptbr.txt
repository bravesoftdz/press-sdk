== Criando uma classe de negócio
================================

Classes de negócio devem ser decendentes da classe TPressObject, e
possuem a seguinte sintaxe:

TNomeClasse = class(TClasseBase)
  _NomeAtributo: TTipoAtributo;
  ...
private
  <métodos Get e Set para as propriedades>
public
  property NomeAtributoItems: TTipoAtributo read _NomeAtributo;
  ...
published
  property NomeAtributo: TTipoNativo read GetNomeAtributo write SetNomeAtributo;
  ...
end;

TClasseBase deve ser TPressObject ou um decendente.

_NomeAtributo deve ser declarado antes da área private, para que ele gere RTTI.

TTipoAtributo é um dos atributos do PressObjects, e pode ser:
TPressString, TPressInteger, TPressFloat, TPressCurrency, TPressEnum,
TPressBoolean, TPressDate, TPressTime, TPressDateTime, TPressVariant,
TPressMemo, TPressPicture, TPressPart, TPressReference, TPressParts ou
TPressReferences.

TipoNativo é o tipo reconhecido pelo compilador e que é relacionado com o
atributo.
TPressString = string
TPressInteger = Integer
TPressFloat = Double
TPressCurrency = Currency
TPressEnum = Enum declarado e registrado pelo usuário
TPressBoolean = Boolean
TPressDate = TDate
TPressTime = TTime
TPressDateTime = TDateTime
TPressMemo = string
TPressPicture = (não implementado)
TPressPart e TPressReference = classe de negócio
TPressParts e TPressReferences retornam, provisoriamente, os próprios
atributos.

AtributoItems são os containeres TPressParts e TPressReferences, e
atualmente lêem o atributo diretamente.

Na área published são declarados todos os atributos que não são
containeres, inclusive os ponteiros TPressPart e TPressReference.

O nome do atributo deve ser exatamente o mesmo na parte superior da
declaração da classe e na área published, com a diferença apenas do
underscore "_".

== Criando uma Query
====================

Queries são utilizadas quando é preciso recuperar um objeto, ou um
conjunto de objetos, sem conhecer seu ID. Elas são decendentes de
TPressQuery e possuem a seguinte estrutura:

TNomeClasse = class(TClasseBase)
  _NomeAtributo: TTipoAtributo;
  ...
private
  <métodos Get e Set para as propriedades>
public
  property NomeAtributoItems: TTipoAtributo read _NomeAtributo;
  ...
published
  property NomeAtributo: TipoNativo read GetNomeAtributo write SetNomeAtributo;
  ...
end;
  
As regras são as mesmas para as classes de negócio, com duas exceções:
TClasseBase deve ser TPressQuery ou um decendente, e os atributos são
usados para filtrar os dados, além de poderem ser persistidos.

== Metadados das classes de negócio
===================================

Cada classe de negócio precisa de informações que, nem o compilador
Free Pascal ou Delphi para Win32 geram, e aqui entram os metadados das
classes.

Os metadados são gerados através de strings retornadas através da função
virtual de classe InternalMetadataStr, criada em cada classe de negócio
que possua atributos.

Vide Metadata-ptbr.txt para maiores informações.

== Metadados das Queries
========================

Possuem sintaxe semelhante aos metadados de classes de negócio com a
extensão necessária para uma Query trabalhar, que é indicar os critérios
utilizado para recuperar objetos da base de dados.

Vide Metadata-ptbr.txt para maiores informações.

== Registrando classes de negócio
=================================

Para ser utilizada, toda classe de negócio deve ser registrada antes de
registrar seu metadados. Para registrar uma classe de negócio, inclua o
seguinte método na área initialization da unit:

TNomeClasse.RegisterClass;

== Registrando Enumerations
===========================

O PressObjects suporta atributos Enum, para isto basta criar um
enumeration e registrá-lo através da função
PressRegisterEnumMetadata(TypeInfo(<EnumName>), '<EnumNameString>');

EnumName = nome do enumeration para o compilador

EnumNameString = nome do enumeration para o framework. Tanto é possível
quanto é recomendado utilizar o mesmo nome, a fim de evitar confusão.
