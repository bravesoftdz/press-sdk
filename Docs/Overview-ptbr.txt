Para construir aplicações através do PressObject, é de fundamental
importância conhecer alguns conceitos do framework.

== Objetos de negócio
=====================

Todas as informações relevantes à aplicação final, tal como itens de uma
nota fiscal, dados de um cliente, ou mesmo algumas opções de
configuração são armazenadas em objetos de negócio. Estes objetos podem,
opcionalmente, serem persistidos (gravados) em uma base de dados, para
que possam ser recuperados no futuro.

Os objetos de negócio possuem atributos, que são suas informações
propriamente ditas. Alguns destes atributos podem apontar para outros
objetos de negócio, e a este ponteiro dá-se o nome de Proxy. A todo este
conjunto - objetos de negócio, atributos, Proxy, entre outras classes
relacionadas - dá-se o nome de Subject.

Um tipo especial de objeto de negócio, a Query, é utilizado para ler um
conjunto de objetos de negócio persistidos na base de dados.

Vide BusinessClasses-ptbr.txt para maiores informações.

== Apresentação de objetos de negócio
=====================================

A apresentação dos objetos de negócio da aplicação são feitos através de
um framework de apresentação. O PressObjects implementa um framework MVP
(Model-View-Presenter) para esta tarefa.

Dentro de um framework MVP existem cinco conjuntos de classes
principais, que são Model, View, Presenter, Command e Interactor.

O Model é responsável por abrigar um objeto de negócio e uma lista de
Commands aplicável a ele.

A View é responsável por referenciar um componente visual, tal como um
Form, um Edit, um Label, etc. Sempre que o framework precisar atualizar
informações em algum componente visual, esta atualização será feita
atráves de sua View.

O Presenter é responsável por ligar Model e View e intermediar a
comunicação entre os dois, com o auxílio de Interactors.

Os Commands são tarefas que são ligadas a um determinado Model, item de
menu ou a um componente visual.

Interactors são classes auxiliares, que tornam o Presenter mais simples
e mais customizável.

== Persistência
===============

A persistência dos objetos de negócio ocorre de forma transparente,
basta que seja feita a escolha do Broker de persistência.

Vide Persistence-ptbr.txt para maiores informações.

== Papel das classes MVP
========================

O Presenter é uma classe obrigatória em qualquer aplicação, por mais
simples que seja. Dentro do Presenter é que o formulário saberá quais
atributos de qual objeto de negócio será ligado a qual componente
visual, e vice-versa.

Uma vez que o formulário ficar mais inteligente e realizar tarefas
que o framework não implementa, será necessário criar Commands com
tais tarefas e, através do Presenter, ligar tal Command a um botão,
um item de menu, ou qualquer outro componente visual.

Todo Model pode implementar um menu de contexto (que é aberto clicando
com o botão direito sobre o componente visual) e este menu pode ser
modificado pela aplicação. Para isto é necessário criar um Model e,
dentro dele, incluir os Commands.

Views e Interactors precisam ser implementados com muito menos
frequência. Uma View, apenas se a aplicação utiliza algum componente
visual que o framework não reconhece, ou se o framework reconhece e se
faz necessário alguma otimização; um Interactor apenas se determinado
Presenter precisa de alguma funcionalidade ou comportamento que não seja
previsto pelo framework.

Vide MVP-ptbr.txt para maiores informações.

== Visão Geral de uma aplicação
===============================

O primeiro trabalho a ser feito para escrever uma aplicação para
PressObjects é definir seus objetos de negócio.

Por ainda não possuir um framework de persistência, será necessário
criar dois modelos de negócio sincronizados, um que implemente objetos
do PressObjects, outro que implemente objetos da camada de persistência.
Logicamente, objetos que não forem persistidos (gravados em um banco de
dados), não precisam fazer parte do segundo modelo.

Em seguida é necessário criar os metadados de cada objeto de negócio. Os
metadados possuem informações como comprimento máximo de um atributo
string, classe para qual um determinado proxy pode apontar, entre outras
informações semelhantes que o framework precisa conhecer em tempo de
execução.

O terceiro passo é criar formulários que imitem os objetos de negócio,
tanto na hierarquia quanto na relação atributo-componente visual. É
possível criar mais de um formulário por classe de negócio, por exemplo,
um formulário para cadastrar e outro para consultar e alterar. Um
componente de um formulário pode opcionalmente ser associado a um
atributo ou um Command, e nem todo atributo precisa ser associado a um
componente. Ligações que não puderem ser estabelecidas serão reportadas
com uma exceção.

Uma vez criados os formulários é necessário criar os Presenters, um para
cada formulário.

Por fim, opcionalmente, pode-se criar Commands e ligá-los a componentes
(através do Presenter); criar Models para incluir os Commands em um menu
de contexto; ou ainda criar Views ou Interactors para alguma otimização.
